<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Rosetta Home 3D Heatmap</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}
      #follow{
        position: absolute;
        top: 0px;
        left: 0px;
        width: 1px;
        height: 1px;
        background-color: rgba(255, 255, 255, .2)
      }
		</style>
	</head>
	<body>
    <div id="follow"></div>
		<script src="/static/js/three.min.js"></script>
    <script src="/static/js/d3-4.11.0.min.js"></script>
    <script src="/static/js/d3-scale-chromatic.min.js"></script>
    <script src="/static/js/d3-scale.min.js"></script>

		<script>
      var measurement_data = <%= Poison.encode!(data) %>;
      var loader = new THREE.FontLoader();
      var font;
      var hues = [
        d3.interpolateBlues,
        d3.interpolateGreens,
        d3.interpolateGreys,
        d3.interpolateOranges,
        d3.interpolatePurples,
        d3.interpolateReds
      ];

      var measurements = [
        ["Humidity", "%", "weather_station.humidity"],
        ["Outdoor Temperature", "&#176;", "weather_station.outdoor_temperature"],
        ["Indoor Temperature", "&#176;", "hvac.temperature"],
        ["Energy", "kW/h", "smart_meter.kw_delivered"],
        ["CO2", "ppm", "ieq.co2"],
        ["PM 2.5", "ppm", "ieq.pm"],
        ["Wind Speed", "m/s", "weather_station.wind.speed"],
        ["VOC", "ppm", "ieq.voc"],
        ["Solar Radiation", "W/m<sup>2</sup>", "weather_station.solar.radiation"]
      ];

			var mouseX = 0,
        mouseY = 0,
			  windowHalfX = window.innerWidth / 2,
			  windowHalfY = window.innerHeight / 2,
			  camera,
        scene,
        renderer;

      var follow = document.getElementById("follow");
        follow.style.top = windowHalfY+"px";
        follow.style.left = windowHalfX+"px";

      loader.load( '/static/fonts/droid_sans_regular.typeface.json', function ( f ) {
        font = f;
        init();
  			animate();
      });

			function init() {

				var i, container;

        var color_scale = d3.scaleLinear().range([0, 1]);

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 21, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = 200;

				scene = new THREE.Scene();
        scene.background = new THREE.Color( 0x111111 );
				scene.fog = new THREE.Fog( 0x111111, 200, 800 );

        var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
        scene.add( directionalLight );
        var alight = new THREE.AmbientLight( 0xFFFFFF ); // soft white light
        scene.add( alight );

				renderer = new THREE.WebGLRenderer({ antialias: true });
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

        dimensions = {x: 5, y: 4, z: 5};
        var points = [];
        for(var x = 0; x < dimensions.x; x++){
          for(var y = 0; y < dimensions.y; y++){
            for(var z = 0; z < dimensions.z; z++){
              points.push({x: x*5, y: y*5, z: z*5});
            }
          }
        }

        var dx = 50,
          dy = 40;

        var layout = [
          [dx, dy, 0], [0, dy, 0], [-dx, dy, 0],
          [dx, 0, 0], [0, 0, 0], [-dx, 0, 0],
          [dx, -dy, 0], [0, -dy, 0], [-dx, -dy, 0],
        ];

        var text_material = new THREE.MeshPhongMaterial( {color: 0xffffff, lights: true} );
        var line_material = new THREE.LineDashedMaterial( {
          color: 0x999999,
          linewidth: 1,
          scale: 1,
          dashSize: .3,
          gapSize: .3,
        });

				for ( i = 0; i < measurements.length; i ++ ) {
          var color_pallette = hues[Math.floor(Math.random()*hues.length)];
					var m = measurements[ i ];
          var p = layout[i];
          var data = measurement_data[m[2]].results[0].series[0].values;
          var minv = d3.min(data, function(d){ return d[1]; });
          var maxv = d3.max(data, function(d){ return d[1]; });
          color_scale.domain([minv, maxv]);
          var group = new THREE.Group();
          var text = new THREE.TextGeometry(m[0], {
        		font: font,
        		size: 1,
        		height: 0,
        		curveSegments: 5,
        	});
          var geometry = new THREE.Geometry();
          var t_obj = new THREE.Mesh(text, text_material);
          t_obj.position.x = 0+p[0];
          t_obj.position.y = 18+p[1];
          t_obj.position.z = 20+p[2];
          group.add(t_obj);
          for(var point = 0; point < points.length; point++){
            var val = data[point+20][1];
            var sphere_material = new THREE.MeshPhongMaterial( {color: color_pallette(color_scale(val)), lights: true} );
            var x = points[point].x + p[0];
            var y = points[point].y + p[1];
            var z = points[point].z + p[2];
            var sg = new THREE.SphereGeometry(1, 12);
            var sphere = new THREE.Mesh(sg, sphere_material);
            sphere.position.set(x, y, z);
            group.add(sphere);
            geometry.vertices.push(new THREE.Vector3(x, y, z));
          }
          geometry.computeLineDistances();
          var line = new THREE.Line(geometry, line_material);
          group.add(line);
          scene.add(group);
				}

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
				window.addEventListener( 'resize', onWindowResize, false );
        setInterval(transition, 8000);
			}

      function transition(){
        var x = (Math.random()*windowHalfX)+(windowHalfX/2);
        var y = (Math.random()*windowHalfY)+(windowHalfY/2);
        d3.select("#follow")
          .transition()
          .duration(6000)
          .style("top", y+"px")
          .style("left", x+"px")
      }

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function onDocumentMouseMove(event) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length > 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {
        var x = parseInt(follow.style.left) - windowHalfX;
        var y = parseInt(follow.style.top) - windowHalfY;

				camera.position.x += ( x - camera.position.x ) * .05;
				camera.position.y += ( - y + 200 - camera.position.y ) * .05;

				camera.lookAt( scene.position );

				renderer.render( scene, camera );

			}

		</script>
	</body>
</html>
